plugins {
    id 'com.android.application'
}

android {
    namespace 'net.pgaskin.windy'
    compileSdk 33

    defaultConfig {
        applicationId "net.pgaskin.windy"
        minSdk 30
        targetSdk 33
        versionCode 5
        versionName "5"

        buildConfigField "String", "WIND_FIELD_API_HOST", "\"windy.api.pgaskin.net\""
        buildConfigField "long", "WIND_FIELD_UPDATE_INTERVAL", "360" // min
        buildConfigField "long", "WIND_FIELD_UPDATE_INTERVAL_MINIMUM", "15" // min
        buildConfigField "boolean", "SAVE_SCREENSHOTS", "false"
    }

    buildTypes {
        eng {
            signingConfig signingConfigs.debug
            buildConfigField "long", "WIND_FIELD_UPDATE_INTERVAL", "15" // min
            buildConfigField "long", "WIND_FIELD_UPDATE_INTERVAL_STARTUP", "1" // min
            buildConfigField "boolean", "SAVE_SCREENSHOTS", "true"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    buildFeatures {
        buildConfig true
    }
}

configurations { natives }

dependencies {
    api "com.badlogicgames.gdx:gdx:1.12.0"
    api "com.badlogicgames.gdx:gdx-backend-android:1.12.0"
    natives "com.badlogicgames.gdx:gdx-platform:1.12.0:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:1.12.0:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:1.12.0:natives-x86_64"
}

tasks.register("copyAndroidNatives") {
    doFirst {
        configurations.natives.files.each { jar ->
            def match = jar.name =~ /natives-(.+?)\.jar$/
            if (match.size() != 0) {
                def arch = match[0][1]
                def dir = file("libs/" + arch + "/")
                dir.mkdirs()
                copy {
                    from zipTree(jar)
                    into dir
                    include "*.so"
                }
            }
        }
    }
}

tasks.configureEach { packageTask ->
    if (packageTask.name.contains("package")) {
        packageTask.dependsOn "copyAndroidNatives"
    }
}
